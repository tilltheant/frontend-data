(function () {
  'use strict';

  //ophalen data van alle autos met hun kleur
  const kentekenautos =
    'https://opendata.rdw.nl/resource/m9d7-ebf2.json?$limit=10000';

  //wachten op de data en dan de data omzetten naar visualisatie

  getData().then((resultaat) => {
    const jaardata = count(resultaat);
    const sortedData = jaardata.sort(sortByYear);
    datavismaken(sortedData);
  });

  //de visualisatie!!! bron: https://www.d3-graph-gallery.com/graph/barplot_button_data_hard.html

  function datavismaken(sortedData) {
    // set the dimensions and margins of the graph
    const margin = { top: 30, right: 30, bottom: 70, left: 60 },
      width = 560 - margin.left - margin.right,
      height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    let svg = d3
      .select('#my_dataviz')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    // Initialize the X axis
    let x = d3.scaleBand().range([0, width]).padding(0.2);
    let xAxis = svg.append('g').attr('transform', 'translate(0,' + height + ')');

    // Initialize the Y axis
    let y = d3.scaleLinear().range([height, 0]);
    let yAxis = svg.append('g').attr('class', 'myYaxis');

    //text toevoegen aan de SVG
    svg
      .append('text')
      .attr('x', width / 2)
      .attr('y', 0 - margin.top / 10)
      .attr('text-anchor', 'middle')
      .style('font-size', '20px')
      .style('text-decoration', 'none')
      .text("Meest verkochte auto's per kleur");

    // A function that create / update the plot for a given variable:
    function update(dataJaareen) {
      console.log(dataJaareen);
      let data = dataJaareen.data;

      // Update the X axis
      x.domain(
        data.map(function (d) {
          return d.color;
        })
      );
      xAxis.call(d3.axisBottom(x));

      // Update the Y axis
      y.domain([
        0,
        d3.max(data, function (d) {
          return d.value;
        }),
      ]);
      yAxis.transition().duration(1000).call(d3.axisLeft(y));

      // Create the u variable
      let change = svg.selectAll('rect').data(data);

      change
        .enter()
        .append('rect') // Add a new rect for each new elements
        .merge(change) // get the already existing elements as well
        .transition() // and apply changes to all of them
        .duration(1000)
        .attr('x', function (d) {
          return x(d.color);
        })
        .attr('y', function (d) {
          return y(d.value);
        })
        .attr('width', x.bandwidth())
        .attr('height', function (d) {
          return height - y(d.value);
        })
        .attr('fill', '#69b3a2');

      // If less group in the new dataset, I delete the ones not in use anymore
      change.exit().remove();
    }

    // Initialize the plot with the first dataset
    update(sortedData[72]);

    d3.selectAll("input[name='years']").on('change', function () {
      if (this.value == 2016) {
        update(sortedData[60]);
      } else {
        update(sortedData[72]);
      }
    });
  }

  //FUNCTIES

  //ophalen van de data, met async wachten totdat de data binnenisgehaald in een json
  //vervolgens filteren naar een andere array door eroverheen te mappen
  //dan de gefilterede data weer filteren op datum(alleen het jaartal de eerste 4 letters) en kleur
  async function getData() {
    const data = await dataophalen(kentekenautos);
    const filtered = filterenhelearray(data);
    const combinedData = filtered.map((item) => {
      return {
        year: item.datum_eerste_toelating.substring(0, 4),
        color: item.eerste_kleur,
      };
    });
    return combinedData;
  }

  // de data ophalen en wachten op een antwoord voordat die verder gaat, vervolgens de data omzetten naar een json
  async function dataophalen(url) {
    const antwoord = await fetch(url);
    const data = await antwoord.json(url);
    return data;
  }

  function findYearIndex(yearItem, array) {
    return array.findIndex((item) => yearItem.year === item.year);
  }

  // samen met gijs gemaakt tellen van de jaartallen en kleuren per jaartal
  function count(array) {
    // Create a new array called yearlyData
    const yearlyData = [];

    // Loop through all our items in our json fetch, they all have their own individual year & color value
    // We need to assign them to the right year by finding their index's
    array.forEach((item) => {

      // Find index of this year, if it's -1 make a new object.
      const yearIndex = findYearIndex(item, yearlyData);

      // If the year is not indexed yet, create a new object inside the year array.
      if (yearIndex < 0) {
        yearlyData.push({
          year: item.year,
          data: [
            {
              color: item.color,
              value: 1,
            },
          ],
        });
      } else {
        // Add this item's data to the corrosponding year
        // Get the index of the color data
        // Check if the color exists, if yes add up one to the value or otherwise create new object with value 1
        const colorData = yearlyData[yearIndex].data;
        const colorIndexInYear = colorData.findIndex(
          (color) => color.color === item.color
        );

        if (colorIndexInYear < 0) {
          colorData.push({
            color: item.color,
            value: 1,
          });
        } else {
          colorData[colorIndexInYear].value++;
        }
      }
    });

    return yearlyData;
  }

  //hele dataset filteren en in een array zetten
  function filterenhelearray(data) {
    return data.map((uitkomst) => uitkomst);
  }

  //sorteren op jaar, door de strings naar numbers te veranderen || samen met gijd gemaakt.
  function sortByYear(a, b) {
    const yearA = Number(a.year);
    const yearB = Number(b.year);

    if (yearA < yearB) return -1;
    if (yearA > yearB) return 1;
    return 0;
  }

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vb3BoYWxlbiBkYXRhIHZhbiBhbGxlIGF1dG9zIG1ldCBodW4ga2xldXJcbmNvbnN0IGtlbnRla2VuYXV0b3MgPVxuICAnaHR0cHM6Ly9vcGVuZGF0YS5yZHcubmwvcmVzb3VyY2UvbTlkNy1lYmYyLmpzb24/JGxpbWl0PTEwMDAwJztcblxuLy93YWNodGVuIG9wIGRlIGRhdGEgZW4gZGFuIGRlIGRhdGEgb216ZXR0ZW4gbmFhciB2aXN1YWxpc2F0aWVcblxuZ2V0RGF0YSgpLnRoZW4oKHJlc3VsdGFhdCkgPT4ge1xuICBjb25zdCBqYWFyZGF0YSA9IGNvdW50KHJlc3VsdGFhdCk7XG4gIGNvbnN0IHNvcnRlZERhdGEgPSBqYWFyZGF0YS5zb3J0KHNvcnRCeVllYXIpO1xuICBkYXRhdmlzbWFrZW4oc29ydGVkRGF0YSk7XG59KTtcblxuLy9kZSB2aXN1YWxpc2F0aWUhISEgYnJvbjogaHR0cHM6Ly93d3cuZDMtZ3JhcGgtZ2FsbGVyeS5jb20vZ3JhcGgvYmFycGxvdF9idXR0b25fZGF0YV9oYXJkLmh0bWxcblxuZnVuY3Rpb24gZGF0YXZpc21ha2VuKHNvcnRlZERhdGEpIHtcbiAgLy8gc2V0IHRoZSBkaW1lbnNpb25zIGFuZCBtYXJnaW5zIG9mIHRoZSBncmFwaFxuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMzAsIHJpZ2h0OiAzMCwgYm90dG9tOiA3MCwgbGVmdDogNjAgfSxcbiAgICB3aWR0aCA9IDU2MCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0LFxuICAgIGhlaWdodCA9IDQwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gIC8vIGFwcGVuZCB0aGUgc3ZnIG9iamVjdCB0byB0aGUgYm9keSBvZiB0aGUgcGFnZVxuICBsZXQgc3ZnID0gZDNcbiAgICAuc2VsZWN0KCcjbXlfZGF0YXZpeicpXG4gICAgLmFwcGVuZCgnc3ZnJylcbiAgICAuYXR0cignd2lkdGgnLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICAuYXBwZW5kKCdnJylcbiAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgbWFyZ2luLmxlZnQgKyAnLCcgKyBtYXJnaW4udG9wICsgJyknKTtcblxuICAvLyBJbml0aWFsaXplIHRoZSBYIGF4aXNcbiAgbGV0IHggPSBkMy5zY2FsZUJhbmQoKS5yYW5nZShbMCwgd2lkdGhdKS5wYWRkaW5nKDAuMik7XG4gIGxldCB4QXhpcyA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsJyArIGhlaWdodCArICcpJyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgWSBheGlzXG4gIGxldCB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSk7XG4gIGxldCB5QXhpcyA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdteVlheGlzJyk7XG5cbiAgLy90ZXh0IHRvZXZvZWdlbiBhYW4gZGUgU1ZHXG4gIHN2Z1xuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRyKCd4Jywgd2lkdGggLyAyKVxuICAgIC5hdHRyKCd5JywgMCAtIG1hcmdpbi50b3AgLyAxMClcbiAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcyMHB4JylcbiAgICAuc3R5bGUoJ3RleHQtZGVjb3JhdGlvbicsICdub25lJylcbiAgICAudGV4dChcIk1lZXN0IHZlcmtvY2h0ZSBhdXRvJ3MgcGVyIGtsZXVyXCIpO1xuXG4gIC8vIEEgZnVuY3Rpb24gdGhhdCBjcmVhdGUgLyB1cGRhdGUgdGhlIHBsb3QgZm9yIGEgZ2l2ZW4gdmFyaWFibGU6XG4gIGZ1bmN0aW9uIHVwZGF0ZShkYXRhSmFhcmVlbikge1xuICAgIGNvbnNvbGUubG9nKGRhdGFKYWFyZWVuKTtcbiAgICBsZXQgZGF0YSA9IGRhdGFKYWFyZWVuLmRhdGE7XG5cbiAgICAvLyBVcGRhdGUgdGhlIFggYXhpc1xuICAgIHguZG9tYWluKFxuICAgICAgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuY29sb3I7XG4gICAgICB9KVxuICAgICk7XG4gICAgeEF4aXMuY2FsbChkMy5heGlzQm90dG9tKHgpKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgWSBheGlzXG4gICAgeS5kb21haW4oW1xuICAgICAgMCxcbiAgICAgIGQzLm1heChkYXRhLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgIH0pLFxuICAgIF0pO1xuICAgIHlBeGlzLnRyYW5zaXRpb24oKS5kdXJhdGlvbigxMDAwKS5jYWxsKGQzLmF4aXNMZWZ0KHkpKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgdSB2YXJpYWJsZVxuICAgIGxldCBjaGFuZ2UgPSBzdmcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKTtcblxuICAgIGNoYW5nZVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKSAvLyBBZGQgYSBuZXcgcmVjdCBmb3IgZWFjaCBuZXcgZWxlbWVudHNcbiAgICAgIC5tZXJnZShjaGFuZ2UpIC8vIGdldCB0aGUgYWxyZWFkeSBleGlzdGluZyBlbGVtZW50cyBhcyB3ZWxsXG4gICAgICAudHJhbnNpdGlvbigpIC8vIGFuZCBhcHBseSBjaGFuZ2VzIHRvIGFsbCBvZiB0aGVtXG4gICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIHgoZC5jb2xvcik7XG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3knLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4geShkLnZhbHVlKTtcbiAgICAgIH0pXG4gICAgICAuYXR0cignd2lkdGgnLCB4LmJhbmR3aWR0aCgpKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiBoZWlnaHQgLSB5KGQudmFsdWUpO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKCdmaWxsJywgJyM2OWIzYTInKTtcblxuICAgIC8vIElmIGxlc3MgZ3JvdXAgaW4gdGhlIG5ldyBkYXRhc2V0LCBJIGRlbGV0ZSB0aGUgb25lcyBub3QgaW4gdXNlIGFueW1vcmVcbiAgICBjaGFuZ2UuZXhpdCgpLnJlbW92ZSgpO1xuICB9XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcGxvdCB3aXRoIHRoZSBmaXJzdCBkYXRhc2V0XG4gIHVwZGF0ZShzb3J0ZWREYXRhWzcyXSk7XG5cbiAgZDMuc2VsZWN0QWxsKFwiaW5wdXRbbmFtZT0neWVhcnMnXVwiKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnZhbHVlID09IDIwMTYpIHtcbiAgICAgIHVwZGF0ZShzb3J0ZWREYXRhWzYwXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZShzb3J0ZWREYXRhWzcyXSk7XG4gICAgfVxuICB9KTtcbn1cblxuLy9GVU5DVElFU1xuXG4vL29waGFsZW4gdmFuIGRlIGRhdGEsIG1ldCBhc3luYyB3YWNodGVuIHRvdGRhdCBkZSBkYXRhIGJpbm5lbmlzZ2VoYWFsZCBpbiBlZW4ganNvblxuLy92ZXJ2b2xnZW5zIGZpbHRlcmVuIG5hYXIgZWVuIGFuZGVyZSBhcnJheSBkb29yIGVyb3ZlcmhlZW4gdGUgbWFwcGVuXG4vL2RhbiBkZSBnZWZpbHRlcmVkZSBkYXRhIHdlZXIgZmlsdGVyZW4gb3AgZGF0dW0oYWxsZWVuIGhldCBqYWFydGFsIGRlIGVlcnN0ZSA0IGxldHRlcnMpIGVuIGtsZXVyXG5hc3luYyBmdW5jdGlvbiBnZXREYXRhKCkge1xuICBjb25zdCBkYXRhID0gYXdhaXQgZGF0YW9waGFsZW4oa2VudGVrZW5hdXRvcyk7XG4gIGNvbnN0IGZpbHRlcmVkID0gZmlsdGVyZW5oZWxlYXJyYXkoZGF0YSk7XG4gIGNvbnN0IGNvbWJpbmVkRGF0YSA9IGZpbHRlcmVkLm1hcCgoaXRlbSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiBpdGVtLmRhdHVtX2VlcnN0ZV90b2VsYXRpbmcuc3Vic3RyaW5nKDAsIDQpLFxuICAgICAgY29sb3I6IGl0ZW0uZWVyc3RlX2tsZXVyLFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gY29tYmluZWREYXRhO1xufVxuXG4vLyBkZSBkYXRhIG9waGFsZW4gZW4gd2FjaHRlbiBvcCBlZW4gYW50d29vcmQgdm9vcmRhdCBkaWUgdmVyZGVyIGdhYXQsIHZlcnZvbGdlbnMgZGUgZGF0YSBvbXpldHRlbiBuYWFyIGVlbiBqc29uXG5hc3luYyBmdW5jdGlvbiBkYXRhb3BoYWxlbih1cmwpIHtcbiAgY29uc3QgYW50d29vcmQgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICBjb25zdCBkYXRhID0gYXdhaXQgYW50d29vcmQuanNvbih1cmwpO1xuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZmluZFllYXJJbmRleCh5ZWFySXRlbSwgYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LmZpbmRJbmRleCgoaXRlbSkgPT4geWVhckl0ZW0ueWVhciA9PT0gaXRlbS55ZWFyKTtcbn1cblxuLy8gc2FtZW4gbWV0IGdpanMgZ2VtYWFrdCB0ZWxsZW4gdmFuIGRlIGphYXJ0YWxsZW4gZW4ga2xldXJlbiBwZXIgamFhcnRhbFxuZnVuY3Rpb24gY291bnQoYXJyYXkpIHtcbiAgLy8gQ3JlYXRlIGEgbmV3IGFycmF5IGNhbGxlZCB5ZWFybHlEYXRhXG4gIGNvbnN0IHllYXJseURhdGEgPSBbXTtcblxuICAvLyBMb29wIHRocm91Z2ggYWxsIG91ciBpdGVtcyBpbiBvdXIganNvbiBmZXRjaCwgdGhleSBhbGwgaGF2ZSB0aGVpciBvd24gaW5kaXZpZHVhbCB5ZWFyICYgY29sb3IgdmFsdWVcbiAgLy8gV2UgbmVlZCB0byBhc3NpZ24gdGhlbSB0byB0aGUgcmlnaHQgeWVhciBieSBmaW5kaW5nIHRoZWlyIGluZGV4J3NcbiAgYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIC8vZGVzdHJ1Y3R1cmluZyBjb25zdCB2b29yIG92ZXJ6aWNodGxpamtoZWlkLlxuICAgIGNvbnN0IHsgY29sb3IsIHllYXIgfSA9IGl0ZW07XG5cbiAgICAvLyBGaW5kIGluZGV4IG9mIHRoaXMgeWVhciwgaWYgaXQncyAtMSBtYWtlIGEgbmV3IG9iamVjdC5cbiAgICBjb25zdCB5ZWFySW5kZXggPSBmaW5kWWVhckluZGV4KGl0ZW0sIHllYXJseURhdGEpO1xuXG4gICAgLy8gSWYgdGhlIHllYXIgaXMgbm90IGluZGV4ZWQgeWV0LCBjcmVhdGUgYSBuZXcgb2JqZWN0IGluc2lkZSB0aGUgeWVhciBhcnJheS5cbiAgICBpZiAoeWVhckluZGV4IDwgMCkge1xuICAgICAgeWVhcmx5RGF0YS5wdXNoKHtcbiAgICAgICAgeWVhcjogaXRlbS55ZWFyLFxuICAgICAgICBkYXRhOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29sb3I6IGl0ZW0uY29sb3IsXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFkZCB0aGlzIGl0ZW0ncyBkYXRhIHRvIHRoZSBjb3Jyb3Nwb25kaW5nIHllYXJcbiAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGNvbG9yIGRhdGFcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjb2xvciBleGlzdHMsIGlmIHllcyBhZGQgdXAgb25lIHRvIHRoZSB2YWx1ZSBvciBvdGhlcndpc2UgY3JlYXRlIG5ldyBvYmplY3Qgd2l0aCB2YWx1ZSAxXG4gICAgICBjb25zdCBjb2xvckRhdGEgPSB5ZWFybHlEYXRhW3llYXJJbmRleF0uZGF0YTtcbiAgICAgIGNvbnN0IGNvbG9ySW5kZXhJblllYXIgPSBjb2xvckRhdGEuZmluZEluZGV4KFxuICAgICAgICAoY29sb3IpID0+IGNvbG9yLmNvbG9yID09PSBpdGVtLmNvbG9yXG4gICAgICApO1xuXG4gICAgICBpZiAoY29sb3JJbmRleEluWWVhciA8IDApIHtcbiAgICAgICAgY29sb3JEYXRhLnB1c2goe1xuICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxuICAgICAgICAgIHZhbHVlOiAxLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yRGF0YVtjb2xvckluZGV4SW5ZZWFyXS52YWx1ZSsrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHllYXJseURhdGE7XG59XG5cbi8vaGVsZSBkYXRhc2V0IGZpbHRlcmVuIGVuIGluIGVlbiBhcnJheSB6ZXR0ZW5cbmZ1bmN0aW9uIGZpbHRlcmVuaGVsZWFycmF5KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEubWFwKCh1aXRrb21zdCkgPT4gdWl0a29tc3QpO1xufVxuXG4vL3NvcnRlcmVuIG9wIGphYXIsIGRvb3IgZGUgc3RyaW5ncyBuYWFyIG51bWJlcnMgdGUgdmVyYW5kZXJlbiB8fCBzYW1lbiBtZXQgZ2lqZCBnZW1hYWt0LlxuZnVuY3Rpb24gc29ydEJ5WWVhcihhLCBiKSB7XG4gIGNvbnN0IHllYXJBID0gTnVtYmVyKGEueWVhcik7XG4gIGNvbnN0IHllYXJCID0gTnVtYmVyKGIueWVhcik7XG5cbiAgaWYgKHllYXJBIDwgeWVhckIpIHJldHVybiAtMTtcbiAgaWYgKHllYXJBID4geWVhckIpIHJldHVybiAxO1xuICByZXR1cm4gMDtcbn1cblxuLy9zYW1lbiBtZXQgc2pvcnMgZ2VtYWFrdFxuLy9kZSBvYmplY3Qgb216ZXR0ZW4gbmFhciBlZW4gYXJyYXkgZG9vciBlZW4gbmlldXdlIGxldCBhYW4gdGUgbWFrZW5cbi8vIC8vIGVuXG4vLyBmdW5jdGlvbiBhcnJheWRhdGEoamFhcmRhdGEpIHtcbi8vICAgcmV0dXJuIE9iamVjdC5rZXlzKGphYXJkYXRhKS5tYXAoKGphYXIpID0+IHtcbi8vICAgICBsZXQgZGF0YSA9IHt9O1xuLy8gICAgIChkYXRhLmphYXJ0YWwgPSBqYWFyKSwgKGRhdGEua2xldXIgPSBqYWFyZGF0YVtqYWFyXSk7XG4vLyAgICAgcmV0dXJuIGRhdGE7XG4vLyAgIH0pO1xuLy8gfVxuXG5mdW5jdGlvbiBmaWx0ZXJlbmtvbG9tKGRhdGEsIGtvbG9tKSB7XG4gIHJldHVybiBkYXRhLm1hcCgodWl0a29tc3QpID0+IHVpdGtvbXN0W2tvbG9tXSk7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0VBQUE7RUFDQSxNQUFNLGFBQWE7RUFDbkIsRUFBRSw4REFBOEQsQ0FBQztBQUNqRTtFQUNBO0FBQ0E7RUFDQSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEtBQUs7RUFDOUIsRUFBRSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7RUFDcEMsRUFBRSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0VBQy9DLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0VBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ0g7RUFDQTtBQUNBO0VBQ0EsU0FBUyxZQUFZLENBQUMsVUFBVSxFQUFFO0VBQ2xDO0VBQ0EsRUFBRSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7RUFDN0QsSUFBSSxLQUFLLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUs7RUFDNUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUM5QztFQUNBO0VBQ0EsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFO0VBQ2QsS0FBSyxNQUFNLENBQUMsYUFBYSxDQUFDO0VBQzFCLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQztFQUNsQixLQUFLLElB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LE9BQU87RUFDUCxLQUFLO0VBQ0wsR0FBRyxDQUFDLENBQUM7QUFDTDtFQUNBLEVBQUUsT0FBTyxVQUFVLENBQUM7RUFDcEIsQ0FBQztBQUNEO0VBQ0E7RUFDQSxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRTtFQUNqQyxFQUFFLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQztFQUMxQyxDQUFDO0FBQ0Q7RUFDQTtFQUNBLFNBQVMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDMUIsRUFBRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQy9CLEVBQUUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQjtFQUNBLEVBQUUsSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7RUFDL0IsRUFBRSxJQUFJLEtBQUssR0FBRyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7RUFDOUIsRUFBRSxPQUFPLENBQUMsQ0FBQztFQUNYOzs7OyJ9